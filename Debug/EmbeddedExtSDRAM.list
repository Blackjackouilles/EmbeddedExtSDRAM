
EmbeddedExtSDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f4  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080027bc  080027bc  000037bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027cc  080027cc  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  080027cc  080027cc  000037cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027d4  080027d4  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d4  080027d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027d8  080027d8  000037d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080027dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000014  080027f0  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080027f0  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007956  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ef  00000000  00000000  0000b99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000050c  00000000  00000000  0000d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025557  00000000  00000000  0000dd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ba1  00000000  00000000  000332db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e61db  00000000  00000000  0003ae7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a98  00000000  00000000  0012109c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00122b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080027a4 	.word	0x080027a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	080027a4 	.word	0x080027a4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004fc:	f3bf 8f4f 	dsb	sy
}
 8000500:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000502:	f3bf 8f6f 	isb	sy
}
 8000506:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000508:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <SCB_EnableICache+0x48>)
 800050a:	2200      	movs	r2, #0
 800050c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000516:	f3bf 8f6f 	isb	sy
}
 800051a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <SCB_EnableICache+0x48>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <SCB_EnableICache+0x48>)
 8000522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000526:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
}
 800052c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052e:	f3bf 8f6f 	isb	sy
}
 8000532:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <SCB_EnableDCache+0x84>)
 800054c:	2200      	movs	r2, #0
 800054e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000552:	f3bf 8f4f 	dsb	sy
}
 8000556:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <SCB_EnableDCache+0x84>)
 800055a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800055e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	0b5b      	lsrs	r3, r3, #13
 8000564:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000568:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	08db      	lsrs	r3, r3, #3
 800056e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000572:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	015a      	lsls	r2, r3, #5
 8000578:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800057c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000582:	4911      	ldr	r1, [pc, #68]	@ (80005c8 <SCB_EnableDCache+0x84>)
 8000584:	4313      	orrs	r3, r2
 8000586:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	60ba      	str	r2, [r7, #8]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1ef      	bne.n	8000574 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	60fa      	str	r2, [r7, #12]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1e5      	bne.n	800056a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005a4:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <SCB_EnableDCache+0x84>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <SCB_EnableDCache+0x84>)
 80005aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b0:	f3bf 8f4f 	dsb	sy
}
 80005b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b6:	f3bf 8f6f 	isb	sy
}
 80005ba:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005d2:	f7ff ff91 	bl	80004f8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005d6:	f7ff ffb5 	bl	8000544 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 ff66 	bl	80014aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f81f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f8f9 	bl	80007d8 <MX_GPIO_Init>
  MX_FMC_Init();
 80005e6:	f000 f889 	bl	80006fc <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t *Register = 0xC0000000;
 80005ea:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80005ee:	607b      	str	r3, [r7, #4]
  *Register = 0x55;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2255      	movs	r2, #85	@ 0x55
 80005f4:	601a      	str	r2, [r3, #0]

  memcpy((uint32_t *) SDRAM_ADD, wdata, 5);
 80005f6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <main+0x4c>)
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	6018      	str	r0, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	7019      	strb	r1, [r3, #0]
  memcpy(rdata, (uint32_t *) SDRAM_ADD, 5);
 8000606:	2205      	movs	r2, #5
 8000608:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <main+0x50>)
 800060e:	f002 f8bb 	bl	8002788 <memcpy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <main+0x46>
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000
 800061c:	20000064 	.word	0x20000064

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f87e 	bl	8002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a25      	ldr	r2, [pc, #148]	@ (80006f8 <SystemClock_Config+0xd8>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000688:	2319      	movs	r3, #25
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800068c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa5c 	bl	8001b5c <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006aa:	f000 fcc3 	bl	8001034 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ae:	f001 fa05 	bl	8001abc <HAL_PWREx_EnableOverDrive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b8:	f000 fcbc 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2107      	movs	r1, #7
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fce2 	bl	80020a4 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e6:	f000 fca5 	bl	8001034 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b090      	sub	sp, #64	@ 0x40
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000716:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <MX_FMC_Init+0xd4>)
 8000718:	4a2e      	ldr	r2, [pc, #184]	@ (80007d4 <MX_FMC_Init+0xd8>)
 800071a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <MX_FMC_Init+0xd4>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <MX_FMC_Init+0xd4>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000728:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <MX_FMC_Init+0xd4>)
 800072a:	2204      	movs	r2, #4
 800072c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <MX_FMC_Init+0xd4>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000734:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <MX_FMC_Init+0xd4>)
 8000736:	2240      	movs	r2, #64	@ 0x40
 8000738:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800073a:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <MX_FMC_Init+0xd4>)
 800073c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000740:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000742:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <MX_FMC_Init+0xd4>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000748:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_FMC_Init+0xd4>)
 800074a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800074e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_FMC_Init+0xd4>)
 8000752:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000756:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_FMC_Init+0xd4>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000762:	2307      	movs	r3, #7
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.SelfRefreshTime = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SdramTiming.RowCycleDelay = 7;
 800076a:	2307      	movs	r3, #7
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  SdramTiming.WriteRecoveryTime = 3;
 800076e:	2303      	movs	r3, #3
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  SdramTiming.RPDelay = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  SdramTiming.RCDDelay = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800077a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077e:	4619      	mov	r1, r3
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_FMC_Init+0xd4>)
 8000782:	f001 fe41 	bl	8002408 <HAL_SDRAM_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 800078c:	f000 fc52 	bl	8001034 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  MT48LC4M32B2_Context_t MT48LC4M32B2;
  MT48LC4M32B2.TargetBank = FMC_SDRAM_CMD_TARGET_BANK1;
 8000790:	2310      	movs	r3, #16
 8000792:	607b      	str	r3, [r7, #4]
  MT48LC4M32B2.RefreshMode = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8000794:	2303      	movs	r3, #3
 8000796:	60bb      	str	r3, [r7, #8]
  MT48LC4M32B2.RefreshRate = REFRESH_COUNT;
 8000798:	f240 6303 	movw	r3, #1539	@ 0x603
 800079c:	60fb      	str	r3, [r7, #12]
  MT48LC4M32B2.BurstLength = MT48LC4M32B2_BURST_LENGTH_1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  MT48LC4M32B2.BurstType = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  MT48LC4M32B2.CASLatency = MT48LC4M32B2_CAS_LATENCY_3;
 80007a6:	2330      	movs	r3, #48	@ 0x30
 80007a8:	61bb      	str	r3, [r7, #24]
  MT48LC4M32B2.OperationMode = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  MT48LC4M32B2.WriteBurstMode = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80007ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007b2:	623b      	str	r3, [r7, #32]

  if (MT48LC4M32B2_Init(&hsdram1, &MT48LC4M32B2)!=MT48LC4M32B2_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_FMC_Init+0xd4>)
 80007ba:	f000 fc41 	bl	8001040 <MT48LC4M32B2_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_FMC_Init+0xcc>
  {
	  Error_Handler();
 80007c4:	f000 fc36 	bl	8001034 <Error_Handler>
  }

  /* USER CODE END FMC_Init 2 */
}
 80007c8:	bf00      	nop
 80007ca:	3740      	adds	r7, #64	@ 0x40
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000030 	.word	0x20000030
 80007d4:	a0000140 	.word	0xa0000140

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	@ 0x40
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	4bad      	ldr	r3, [pc, #692]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4aac      	ldr	r2, [pc, #688]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4baa      	ldr	r3, [pc, #680]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0310 	and.w	r3, r3, #16
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4ba7      	ldr	r3, [pc, #668]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4aa6      	ldr	r2, [pc, #664]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4ba4      	ldr	r3, [pc, #656]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
 800081c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4ba1      	ldr	r3, [pc, #644]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4aa0      	ldr	r2, [pc, #640]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b9e      	ldr	r3, [pc, #632]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	623b      	str	r3, [r7, #32]
 8000834:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b9b      	ldr	r3, [pc, #620]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a9a      	ldr	r2, [pc, #616]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b98      	ldr	r3, [pc, #608]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b95      	ldr	r3, [pc, #596]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a94      	ldr	r2, [pc, #592]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b92      	ldr	r3, [pc, #584]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b8f      	ldr	r3, [pc, #572]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a8e      	ldr	r2, [pc, #568]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b8c      	ldr	r3, [pc, #560]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800087e:	4b89      	ldr	r3, [pc, #548]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a88      	ldr	r2, [pc, #544]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000884:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b86      	ldr	r3, [pc, #536]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000896:	4b83      	ldr	r3, [pc, #524]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a82      	ldr	r2, [pc, #520]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800089c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b80      	ldr	r3, [pc, #512]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008ae:	4b7d      	ldr	r3, [pc, #500]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a7c      	ldr	r2, [pc, #496]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b7a      	ldr	r3, [pc, #488]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b77      	ldr	r3, [pc, #476]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a76      	ldr	r2, [pc, #472]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b74      	ldr	r3, [pc, #464]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b71      	ldr	r3, [pc, #452]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a70      	ldr	r2, [pc, #448]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b6e      	ldr	r3, [pc, #440]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2120      	movs	r1, #32
 80008fa:	486b      	ldr	r0, [pc, #428]	@ (8000aa8 <MX_GPIO_Init+0x2d0>)
 80008fc:	f001 f8c4 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000906:	4869      	ldr	r0, [pc, #420]	@ (8000aac <MX_GPIO_Init+0x2d4>)
 8000908:	f001 f8be 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2108      	movs	r1, #8
 8000910:	4867      	ldr	r0, [pc, #412]	@ (8000ab0 <MX_GPIO_Init+0x2d8>)
 8000912:	f001 f8b9 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091c:	4865      	ldr	r0, [pc, #404]	@ (8000ab4 <MX_GPIO_Init+0x2dc>)
 800091e:	f001 f8b3 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	21c8      	movs	r1, #200	@ 0xc8
 8000926:	4864      	ldr	r0, [pc, #400]	@ (8000ab8 <MX_GPIO_Init+0x2e0>)
 8000928:	f001 f8ae 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800092c:	2310      	movs	r3, #16
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800093c:	230e      	movs	r3, #14
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000944:	4619      	mov	r1, r3
 8000946:	485d      	ldr	r0, [pc, #372]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000948:	f000 fef2 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800094c:	2308      	movs	r3, #8
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800095c:	4619      	mov	r1, r3
 800095e:	4857      	ldr	r0, [pc, #348]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000960:	f000 fee6 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000964:	2304      	movs	r3, #4
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000974:	2309      	movs	r3, #9
 8000976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097c:	4619      	mov	r1, r3
 800097e:	484f      	ldr	r0, [pc, #316]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000980:	f000 fed6 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000984:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	4845      	ldr	r0, [pc, #276]	@ (8000ab8 <MX_GPIO_Init+0x2e0>)
 80009a2:	f000 fec5 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80009a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	2312      	movs	r3, #18
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b8:	2304      	movs	r3, #4
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	483f      	ldr	r0, [pc, #252]	@ (8000ac0 <MX_GPIO_Init+0x2e8>)
 80009c4:	f000 feb4 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009c8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009da:	230a      	movs	r3, #10
 80009dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e2:	4619      	mov	r1, r3
 80009e4:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <MX_GPIO_Init+0x2e8>)
 80009e6:	f000 fea3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009ea:	2310      	movs	r3, #16
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009fa:	2302      	movs	r3, #2
 80009fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a02:	4619      	mov	r1, r3
 8000a04:	482e      	ldr	r0, [pc, #184]	@ (8000ac0 <MX_GPIO_Init+0x2e8>)
 8000a06:	f000 fe93 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a22:	4619      	mov	r1, r3
 8000a24:	4820      	ldr	r0, [pc, #128]	@ (8000aa8 <MX_GPIO_Init+0x2d0>)
 8000a26:	f000 fe83 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000a2a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	481f      	ldr	r0, [pc, #124]	@ (8000ac4 <MX_GPIO_Init+0x2ec>)
 8000a48:	f000 fe72 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a66:	4619      	mov	r1, r3
 8000a68:	4817      	ldr	r0, [pc, #92]	@ (8000ac8 <MX_GPIO_Init+0x2f0>)
 8000a6a:	f000 fe61 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a6e:	2360      	movs	r3, #96	@ 0x60
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a7e:	230d      	movs	r3, #13
 8000a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000a8a:	f000 fe51 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aa2:	e013      	b.n	8000acc <MX_GPIO_Init+0x2f4>
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40022000 	.word	0x40022000
 8000ab0:	40022800 	.word	0x40022800
 8000ab4:	40021c00 	.word	0x40021c00
 8000ab8:	40021800 	.word	0x40021800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	48bc      	ldr	r0, [pc, #752]	@ (8000dc4 <MX_GPIO_Init+0x5ec>)
 8000ad4:	f000 fe2c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	48b4      	ldr	r0, [pc, #720]	@ (8000dc4 <MX_GPIO_Init+0x5ec>)
 8000af4:	f000 fe1c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000af8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b0a:	230e      	movs	r3, #14
 8000b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b12:	4619      	mov	r1, r3
 8000b14:	48ac      	ldr	r0, [pc, #688]	@ (8000dc8 <MX_GPIO_Init+0x5f0>)
 8000b16:	f000 fe0b 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	48a6      	ldr	r0, [pc, #664]	@ (8000dc8 <MX_GPIO_Init+0x5f0>)
 8000b30:	f000 fdfe 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b34:	2340      	movs	r3, #64	@ 0x40
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b38:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b46:	4619      	mov	r1, r3
 8000b48:	48a0      	ldr	r0, [pc, #640]	@ (8000dcc <MX_GPIO_Init+0x5f4>)
 8000b4a:	f000 fdf1 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4899      	ldr	r0, [pc, #612]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000b6c:	f000 fde0 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b70:	23f0      	movs	r3, #240	@ 0xf0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b80:	230a      	movs	r3, #10
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4892      	ldr	r0, [pc, #584]	@ (8000dd4 <MX_GPIO_Init+0x5fc>)
 8000b8c:	f000 fdd0 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000b90:	23f7      	movs	r3, #247	@ 0xf7
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba0:	230e      	movs	r3, #14
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	488b      	ldr	r0, [pc, #556]	@ (8000dd8 <MX_GPIO_Init+0x600>)
 8000bac:	f000 fdc0 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bc2:	2309      	movs	r3, #9
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4883      	ldr	r0, [pc, #524]	@ (8000ddc <MX_GPIO_Init+0x604>)
 8000bce:	f000 fdaf 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000be4:	230a      	movs	r3, #10
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	487b      	ldr	r0, [pc, #492]	@ (8000ddc <MX_GPIO_Init+0x604>)
 8000bf0:	f000 fd9e 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4870      	ldr	r0, [pc, #448]	@ (8000dcc <MX_GPIO_Init+0x5f4>)
 8000c0c:	f000 fd90 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c10:	2308      	movs	r3, #8
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c20:	230d      	movs	r3, #13
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4868      	ldr	r0, [pc, #416]	@ (8000dcc <MX_GPIO_Init+0x5f4>)
 8000c2c:	f000 fd80 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c30:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4862      	ldr	r0, [pc, #392]	@ (8000dd4 <MX_GPIO_Init+0x5fc>)
 8000c4a:	f000 fd71 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c60:	4619      	mov	r1, r3
 8000c62:	485f      	ldr	r0, [pc, #380]	@ (8000de0 <MX_GPIO_Init+0x608>)
 8000c64:	f000 fd64 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000c68:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c7a:	230e      	movs	r3, #14
 8000c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	4853      	ldr	r0, [pc, #332]	@ (8000dd4 <MX_GPIO_Init+0x5fc>)
 8000c86:	f000 fd53 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	484d      	ldr	r0, [pc, #308]	@ (8000dd8 <MX_GPIO_Init+0x600>)
 8000ca2:	f000 fd45 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cb8:	230d      	movs	r3, #13
 8000cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4846      	ldr	r0, [pc, #280]	@ (8000ddc <MX_GPIO_Init+0x604>)
 8000cc4:	f000 fd34 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	483c      	ldr	r0, [pc, #240]	@ (8000dcc <MX_GPIO_Init+0x5f4>)
 8000cdc:	f000 fd28 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4834      	ldr	r0, [pc, #208]	@ (8000dcc <MX_GPIO_Init+0x5f4>)
 8000cfc:	f000 fd18 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d00:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	4833      	ldr	r0, [pc, #204]	@ (8000de4 <MX_GPIO_Init+0x60c>)
 8000d16:	f000 fd0b 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	4827      	ldr	r0, [pc, #156]	@ (8000dd4 <MX_GPIO_Init+0x5fc>)
 8000d36:	f000 fcfb 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	4824      	ldr	r0, [pc, #144]	@ (8000de4 <MX_GPIO_Init+0x60c>)
 8000d54:	f000 fcec 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d58:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d6a:	230d      	movs	r3, #13
 8000d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	481b      	ldr	r0, [pc, #108]	@ (8000de4 <MX_GPIO_Init+0x60c>)
 8000d76:	f000 fcdb 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	480f      	ldr	r0, [pc, #60]	@ (8000dd4 <MX_GPIO_Init+0x5fc>)
 8000d96:	f000 fccb 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dac:	2307      	movs	r3, #7
 8000dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000db8:	f000 fcba 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dc2:	e011      	b.n	8000de8 <MX_GPIO_Init+0x610>
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40022400 	.word	0x40022400
 8000dcc:	40020c00 	.word	0x40020c00
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	40022800 	.word	0x40022800
 8000ddc:	40021800 	.word	0x40021800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4885      	ldr	r0, [pc, #532]	@ (8001014 <MX_GPIO_Init+0x83c>)
 8000e00:	f000 fc96 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	487f      	ldr	r0, [pc, #508]	@ (8001018 <MX_GPIO_Init+0x840>)
 8000e1c:	f000 fc88 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e30:	2308      	movs	r3, #8
 8000e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4878      	ldr	r0, [pc, #480]	@ (800101c <MX_GPIO_Init+0x844>)
 8000e3c:	f000 fc78 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e40:	2310      	movs	r3, #16
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e50:	230a      	movs	r3, #10
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4871      	ldr	r0, [pc, #452]	@ (8001020 <MX_GPIO_Init+0x848>)
 8000e5c:	f000 fc68 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000e60:	23c8      	movs	r3, #200	@ 0xc8
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e74:	4619      	mov	r1, r3
 8000e76:	486b      	ldr	r0, [pc, #428]	@ (8001024 <MX_GPIO_Init+0x84c>)
 8000e78:	f000 fc5a 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000e7c:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e82:	2303      	movs	r3, #3
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4865      	ldr	r0, [pc, #404]	@ (8001028 <MX_GPIO_Init+0x850>)
 8000e92:	f000 fc4d 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000e96:	2305      	movs	r3, #5
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	485a      	ldr	r0, [pc, #360]	@ (800101c <MX_GPIO_Init+0x844>)
 8000eb2:	f000 fc3d 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eb6:	2332      	movs	r3, #50	@ 0x32
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec6:	230b      	movs	r3, #11
 8000ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4852      	ldr	r0, [pc, #328]	@ (800101c <MX_GPIO_Init+0x844>)
 8000ed2:	f000 fc2d 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ee6:	2309      	movs	r3, #9
 8000ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	484e      	ldr	r0, [pc, #312]	@ (800102c <MX_GPIO_Init+0x854>)
 8000ef2:	f000 fc1d 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000ef6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f08:	2309      	movs	r3, #9
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4847      	ldr	r0, [pc, #284]	@ (8001030 <MX_GPIO_Init+0x858>)
 8000f14:	f000 fc0c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	483e      	ldr	r0, [pc, #248]	@ (8001024 <MX_GPIO_Init+0x84c>)
 8000f2c:	f000 fc00 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f30:	2386      	movs	r3, #134	@ 0x86
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f40:	230b      	movs	r3, #11
 8000f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4832      	ldr	r0, [pc, #200]	@ (8001014 <MX_GPIO_Init+0x83c>)
 8000f4c:	f000 fbf0 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f60:	4619      	mov	r1, r3
 8000f62:	482c      	ldr	r0, [pc, #176]	@ (8001014 <MX_GPIO_Init+0x83c>)
 8000f64:	f000 fbe4 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000f68:	2350      	movs	r3, #80	@ 0x50
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f78:	230d      	movs	r3, #13
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f80:	4619      	mov	r1, r3
 8000f82:	4824      	ldr	r0, [pc, #144]	@ (8001014 <MX_GPIO_Init+0x83c>)
 8000f84:	f000 fbd4 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000f88:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8e:	2312      	movs	r3, #18
 8000f90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481e      	ldr	r0, [pc, #120]	@ (8001020 <MX_GPIO_Init+0x848>)
 8000fa6:	f000 fbc3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000faa:	2328      	movs	r3, #40	@ 0x28
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4813      	ldr	r0, [pc, #76]	@ (8001014 <MX_GPIO_Init+0x83c>)
 8000fc6:	f000 fbb3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000fca:	2340      	movs	r3, #64	@ 0x40
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000fda:	2309      	movs	r3, #9
 8000fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480e      	ldr	r0, [pc, #56]	@ (8001020 <MX_GPIO_Init+0x848>)
 8000fe6:	f000 fba3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000fea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_GPIO_Init+0x854>)
 8001008:	f000 fb92 	bl	8001730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100c:	bf00      	nop
 800100e:	3740      	adds	r7, #64	@ 0x40
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020000 	.word	0x40020000
 8001018:	40022000 	.word	0x40022000
 800101c:	40020800 	.word	0x40020800
 8001020:	40021c00 	.word	0x40021c00
 8001024:	40021800 	.word	0x40021800
 8001028:	40021400 	.word	0x40021400
 800102c:	40020400 	.word	0x40020400
 8001030:	40020c00 	.word	0x40020c00

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <Error_Handler+0x8>

08001040 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f832 	bl	80010c0 <MT48LC4M32B2_ClockEnable>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d128      	bne.n	80010b4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 f8e2 	bl	800122c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f84a 	bl	8001108 <MT48LC4M32B2_Precharge>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11c      	bne.n	80010b4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f897 	bl	80011b8 <MT48LC4M32B2_RefreshMode>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d111      	bne.n	80010b4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001090:	6839      	ldr	r1, [r7, #0]
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f85c 	bl	8001150 <MT48LC4M32B2_ModeRegConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10a      	bne.n	80010b4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	4619      	mov	r1, r3
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f8ad 	bl	8001204 <MT48LC4M32B2_RefreshRate>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MT48LC4M32B2_ClockEnable+0x44>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80010d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <MT48LC4M32B2_ClockEnable+0x44>)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MT48LC4M32B2_ClockEnable+0x44>)
 80010d8:	2201      	movs	r2, #1
 80010da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MT48LC4M32B2_ClockEnable+0x44>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80010e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e6:	4907      	ldr	r1, [pc, #28]	@ (8001104 <MT48LC4M32B2_ClockEnable+0x44>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f001 f9c1 	bl	8002470 <HAL_SDRAM_SendCommand>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010f8:	e000      	b.n	80010fc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80010fa:	2300      	movs	r3, #0
  }
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000070 	.word	0x20000070

08001108 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MT48LC4M32B2_Precharge+0x44>)
 8001114:	2202      	movs	r2, #2
 8001116:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001118:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <MT48LC4M32B2_Precharge+0x44>)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MT48LC4M32B2_Precharge+0x44>)
 8001120:	2201      	movs	r2, #1
 8001122:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MT48LC4M32B2_Precharge+0x44>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800112a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112e:	4907      	ldr	r1, [pc, #28]	@ (800114c <MT48LC4M32B2_Precharge+0x44>)
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f001 f99d 	bl	8002470 <HAL_SDRAM_SendCommand>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001140:	e000      	b.n	8001144 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001142:	2300      	movs	r3, #0
  }
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000070 	.word	0x20000070

08001150 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001162:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001168:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800116e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001174:	4313      	orrs	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800117a:	2204      	movs	r2, #4
 800117c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001184:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001188:	2201      	movs	r2, #1
 800118a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800118c:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001196:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f001 f969 	bl	8002470 <HAL_SDRAM_SendCommand>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a8:	e000      	b.n	80011ac <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80011aa:	2300      	movs	r3, #0
  }
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000070 	.word	0x20000070

080011b8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 80011c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <MT48LC4M32B2_RefreshMode+0x48>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 80011ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <MT48LC4M32B2_RefreshMode+0x48>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MT48LC4M32B2_RefreshMode+0x48>)
 80011d2:	2208      	movs	r2, #8
 80011d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <MT48LC4M32B2_RefreshMode+0x48>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80011dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <MT48LC4M32B2_RefreshMode+0x48>)
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f001 f944 	bl	8002470 <HAL_SDRAM_SendCommand>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f2:	e000      	b.n	80011f6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80011f4:	2300      	movs	r3, #0
  }
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000070 	.word	0x20000070

08001204 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 f962 	bl	80024da <HAL_SDRAM_ProgramRefreshRate>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001220:	e000      	b.n	8001224 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001222:	2300      	movs	r3, #0
  }
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001234:	f000 f98a 	bl	800154c <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800123a:	bf00      	nop
 800123c:	f000 f986 	bl	800154c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_MspInit+0x44>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <HAL_MspInit+0x44>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_MspInit+0x44>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_MspInit+0x44>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <HAL_MspInit+0x44>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_MspInit+0x44>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012b4:	4b3a      	ldr	r3, [pc, #232]	@ (80013a0 <HAL_FMC_MspInit+0x100>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d16d      	bne.n	8001398 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80012bc:	4b38      	ldr	r3, [pc, #224]	@ (80013a0 <HAL_FMC_MspInit+0x100>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012c2:	4b38      	ldr	r3, [pc, #224]	@ (80013a4 <HAL_FMC_MspInit+0x104>)
 80012c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c6:	4a37      	ldr	r2, [pc, #220]	@ (80013a4 <HAL_FMC_MspInit+0x104>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80012ce:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <HAL_FMC_MspInit+0x104>)
 80012d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80012da:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80012de:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ec:	230c      	movs	r3, #12
 80012ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	482c      	ldr	r0, [pc, #176]	@ (80013a8 <HAL_FMC_MspInit+0x108>)
 80012f6:	f000 fa1b 	bl	8001730 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80012fa:	f248 1333 	movw	r3, #33075	@ 0x8133
 80012fe:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800130c:	230c      	movs	r3, #12
 800130e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4825      	ldr	r0, [pc, #148]	@ (80013ac <HAL_FMC_MspInit+0x10c>)
 8001316:	f000 fa0b 	bl	8001730 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800131a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800131e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800132c:	230c      	movs	r3, #12
 800132e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	481e      	ldr	r0, [pc, #120]	@ (80013b0 <HAL_FMC_MspInit+0x110>)
 8001336:	f000 f9fb 	bl	8001730 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800133a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800133e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800134c:	230c      	movs	r3, #12
 800134e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4817      	ldr	r0, [pc, #92]	@ (80013b4 <HAL_FMC_MspInit+0x114>)
 8001356:	f000 f9eb 	bl	8001730 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800135a:	2328      	movs	r3, #40	@ 0x28
 800135c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136a:	230c      	movs	r3, #12
 800136c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	@ (80013b8 <HAL_FMC_MspInit+0x118>)
 8001374:	f000 f9dc 	bl	8001730 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001378:	2308      	movs	r3, #8
 800137a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001388:	230c      	movs	r3, #12
 800138a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	480a      	ldr	r0, [pc, #40]	@ (80013bc <HAL_FMC_MspInit+0x11c>)
 8001392:	f000 f9cd 	bl	8001730 <HAL_GPIO_Init>
 8001396:	e000      	b.n	800139a <HAL_FMC_MspInit+0xfa>
    return;
 8001398:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000080 	.word	0x20000080
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021400 	.word	0x40021400
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40020800 	.word	0x40020800

080013c0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013c8:	f7ff ff6a 	bl	80012a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f87b 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001490 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800145c:	f7ff ffea 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001462:	490d      	ldr	r1, [pc, #52]	@ (8001498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001464:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001478:	4c0a      	ldr	r4, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001486:	f001 f95b 	bl	8002740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148a:	f7ff f89f 	bl	80005cc <main>
  bx  lr    
 800148e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001490:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800149c:	080027dc 	.word	0x080027dc
  ldr r2, =_sbss
 80014a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80014a4:	20000088 	.word	0x20000088

080014a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC_IRQHandler>

080014aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 f90a 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 f805 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ba:	f7ff fecd 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f917 	bl	8001716 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001500:	f000 f8ed 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000008 	.word	0x20000008
 800151c:	20000010 	.word	0x20000010
 8001520:	2000000c 	.word	0x2000000c

08001524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000010 	.word	0x20000010
 8001548:	20000084 	.word	0x20000084

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000084 	.word	0x20000084

08001564 <__NVIC_SetPriorityGrouping>:
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	4313      	orrs	r3, r2
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	05fa0000 	.word	0x05fa0000

080015ac <__NVIC_GetPriorityGrouping>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_SetPriority>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	@ (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff47 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff5c 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffb0 	bl	8001684 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e175      	b.n	8001a3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 8164 	bne.w	8001a36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d005      	beq.n	8001786 <HAL_GPIO_Init+0x56>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d130      	bne.n	80017e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0201 	and.w	r2, r3, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d017      	beq.n	8001824 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80be 	beq.w	8001a36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a65      	ldr	r2, [pc, #404]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b63      	ldr	r3, [pc, #396]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018d2:	4a61      	ldr	r2, [pc, #388]	@ (8001a58 <HAL_GPIO_Init+0x328>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <HAL_GPIO_Init+0x32c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d037      	beq.n	800196e <HAL_GPIO_Init+0x23e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a57      	ldr	r2, [pc, #348]	@ (8001a60 <HAL_GPIO_Init+0x330>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d031      	beq.n	800196a <HAL_GPIO_Init+0x23a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a56      	ldr	r2, [pc, #344]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d02b      	beq.n	8001966 <HAL_GPIO_Init+0x236>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a55      	ldr	r2, [pc, #340]	@ (8001a68 <HAL_GPIO_Init+0x338>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x232>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a54      	ldr	r2, [pc, #336]	@ (8001a6c <HAL_GPIO_Init+0x33c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x22e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a53      	ldr	r2, [pc, #332]	@ (8001a70 <HAL_GPIO_Init+0x340>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x22a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a52      	ldr	r2, [pc, #328]	@ (8001a74 <HAL_GPIO_Init+0x344>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a51      	ldr	r2, [pc, #324]	@ (8001a78 <HAL_GPIO_Init+0x348>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a50      	ldr	r2, [pc, #320]	@ (8001a7c <HAL_GPIO_Init+0x34c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4f      	ldr	r2, [pc, #316]	@ (8001a80 <HAL_GPIO_Init+0x350>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x21a>
 8001946:	2309      	movs	r3, #9
 8001948:	e012      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194a:	230a      	movs	r3, #10
 800194c:	e010      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194e:	2308      	movs	r3, #8
 8001950:	e00e      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001952:	2307      	movs	r3, #7
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001956:	2306      	movs	r3, #6
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	@ (8001a58 <HAL_GPIO_Init+0x328>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b2:	4a34      	ldr	r2, [pc, #208]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b8:	4b32      	ldr	r3, [pc, #200]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019dc:	4a29      	ldr	r2, [pc, #164]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e2:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a06:	4a1f      	ldr	r2, [pc, #124]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <HAL_GPIO_Init+0x354>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f ae86 	bls.w	8001750 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021c00 	.word	0x40021c00
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	40022400 	.word	0x40022400
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aea:	f7ff fd2f 	bl	800154c <HAL_GetTick>
 8001aee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001af0:	e009      	b.n	8001b06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001af2:	f7ff fd2b 	bl	800154c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b00:	d901      	bls.n	8001b06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e022      	b.n	8001b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b06:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b12:	d1ee      	bne.n	8001af2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b14:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0f      	ldr	r2, [pc, #60]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b20:	f7ff fd14 	bl	800154c <HAL_GetTick>
 8001b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b26:	e009      	b.n	8001b3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b28:	f7ff fd10 	bl	800154c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b36:	d901      	bls.n	8001b3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e007      	b.n	8001b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b48:	d1ee      	bne.n	8001b28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e291      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8087 	beq.w	8001c8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	4b96      	ldr	r3, [pc, #600]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8c:	4b93      	ldr	r3, [pc, #588]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d112      	bne.n	8001bbe <HAL_RCC_OscConfig+0x62>
 8001b98:	4b90      	ldr	r3, [pc, #576]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d06c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x130>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d168      	bne.n	8001c8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e26b      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x7a>
 8001bc8:	4b84      	ldr	r3, [pc, #528]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a83      	ldr	r2, [pc, #524]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e02e      	b.n	8001c34 <HAL_RCC_OscConfig+0xd8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x9c>
 8001bde:	4b7f      	ldr	r3, [pc, #508]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b7c      	ldr	r3, [pc, #496]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7b      	ldr	r2, [pc, #492]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xd8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0xc0>
 8001c02:	4b76      	ldr	r3, [pc, #472]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a75      	ldr	r2, [pc, #468]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b73      	ldr	r3, [pc, #460]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a72      	ldr	r2, [pc, #456]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xd8>
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6e      	ldr	r2, [pc, #440]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b6c      	ldr	r3, [pc, #432]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc86 	bl	800154c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc82 	bl	800154c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e21f      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b61      	ldr	r3, [pc, #388]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xe8>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff fc72 	bl	800154c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fc6e 	bl	800154c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e20b      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x110>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d069      	beq.n	8001d6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9a:	4b50      	ldr	r3, [pc, #320]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x190>
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b47      	ldr	r3, [pc, #284]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1df      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	493d      	ldr	r1, [pc, #244]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e040      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d023      	beq.n	8001d3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a38      	ldr	r2, [pc, #224]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc24 	bl	800154c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fc20 	bl	800154c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e1bd      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b30      	ldr	r3, [pc, #192]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4929      	ldr	r1, [pc, #164]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
 8001d3a:	e018      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3c:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a26      	ldr	r2, [pc, #152]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff fc00 	bl	800154c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff fbfc 	bl	800154c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e199      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d038      	beq.n	8001dec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d019      	beq.n	8001db6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d86:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fbdd 	bl	800154c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff fbd9 	bl	800154c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e176      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x23a>
 8001db4:	e01a      	b.n	8001dec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dba:	4a08      	ldr	r2, [pc, #32]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fbc3 	bl	800154c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fbbf 	bl	800154c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d903      	bls.n	8001de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e15c      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
 8001ddc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	4b91      	ldr	r3, [pc, #580]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a4 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	4a87      	ldr	r2, [pc, #540]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e12:	4b85      	ldr	r3, [pc, #532]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e22:	4b82      	ldr	r3, [pc, #520]	@ (800202c <HAL_RCC_OscConfig+0x4d0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800202c <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	@ (800202c <HAL_RCC_OscConfig+0x4d0>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb87 	bl	800154c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff fb83 	bl	800154c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	@ 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e120      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e54:	4b75      	ldr	r3, [pc, #468]	@ (800202c <HAL_RCC_OscConfig+0x4d0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x31a>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	e02d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x376>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x33c>
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	4a69      	ldr	r2, [pc, #420]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8a:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8e:	4a66      	ldr	r2, [pc, #408]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x376>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x35e>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea4:	4a60      	ldr	r2, [pc, #384]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eac:	4b5e      	ldr	r3, [pc, #376]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x376>
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec6:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb37 	bl	800154c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fb33 	bl	800154c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0ce      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ee      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x386>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff fb21 	bl	800154c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fb1d 	bl	800154c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	4b40      	ldr	r3, [pc, #256]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b3c      	ldr	r3, [pc, #240]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80a4 	beq.w	8002094 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d06b      	beq.n	8002030 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d149      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a30      	ldr	r2, [pc, #192]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff faee 	bl	800154c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff faea 	bl	800154c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e087      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	4b28      	ldr	r3, [pc, #160]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	019b      	lsls	r3, r3, #6
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	3b01      	subs	r3, #1
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	061b      	lsls	r3, r3, #24
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fbe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fabe 	bl	800154c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff faba 	bl	800154c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e057      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x478>
 8001ff2:	e04f      	b.n	8002094 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff faa4 	bl	800154c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff faa0 	bl	800154c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e03d      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_RCC_OscConfig+0x4cc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x4ac>
 8002026:	e035      	b.n	8002094 <HAL_RCC_OscConfig+0x538>
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCC_OscConfig+0x544>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d028      	beq.n	8002090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d121      	bne.n	8002090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d11a      	bne.n	8002090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002066:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002068:	4293      	cmp	r3, r2
 800206a:	d111      	bne.n	8002090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	3b01      	subs	r3, #1
 800207a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0d0      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b67      	ldr	r3, [pc, #412]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	4965      	ldr	r1, [pc, #404]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a58      	ldr	r2, [pc, #352]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800210e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a52      	ldr	r2, [pc, #328]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002122:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d040      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d115      	bne.n	8002186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b41      	ldr	r3, [pc, #260]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e073      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3d      	ldr	r3, [pc, #244]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b39      	ldr	r3, [pc, #228]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4936      	ldr	r1, [pc, #216]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7ff f9d8 	bl	800154c <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7ff f9d4 	bl	800154c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e053      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d210      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 020f 	bic.w	r2, r3, #15
 80021de:	4922      	ldr	r1, [pc, #136]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	@ (8002270 <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_RCC_ClockConfig+0x1d0>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_RCC_ClockConfig+0x1d4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f934 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00
 800226c:	40023800 	.word	0x40023800
 8002270:	080027bc 	.word	0x080027bc
 8002274:	20000008 	.word	0x20000008
 8002278:	2000000c 	.word	0x2000000c

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002280:	b090      	sub	sp, #64	@ 0x40
 8002282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800228c:	2300      	movs	r3, #0
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002294:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d00d      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x40>
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	f200 80a1 	bhi.w	80023e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ae:	e09b      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b53      	ldr	r3, [pc, #332]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x184>)
 80022b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b4:	e09b      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b6:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x188>)
 80022b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ba:	e098      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022bc:	4b4f      	ldr	r3, [pc, #316]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022c6:	4b4d      	ldr	r3, [pc, #308]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	2200      	movs	r2, #0
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022e4:	2100      	movs	r1, #0
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e8:	fb03 f201 	mul.w	r2, r3, r1
 80022ec:	2300      	movs	r3, #0
 80022ee:	fb00 f303 	mul.w	r3, r0, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	4a43      	ldr	r2, [pc, #268]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f6:	fba0 1202 	umull	r1, r2, r0, r2
 80022fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022fc:	460a      	mov	r2, r1
 80022fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002302:	4413      	add	r3, r2
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002308:	2200      	movs	r2, #0
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	61fa      	str	r2, [r7, #28]
 800230e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002312:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002316:	f7fd ff77 	bl	8000208 <__aeabi_uldivmod>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4613      	mov	r3, r2
 8002320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002322:	e053      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002324:	4b35      	ldr	r3, [pc, #212]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	2200      	movs	r2, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	617a      	str	r2, [r7, #20]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002336:	f04f 0b00 	mov.w	fp, #0
 800233a:	4652      	mov	r2, sl
 800233c:	465b      	mov	r3, fp
 800233e:	f04f 0000 	mov.w	r0, #0
 8002342:	f04f 0100 	mov.w	r1, #0
 8002346:	0159      	lsls	r1, r3, #5
 8002348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800234c:	0150      	lsls	r0, r2, #5
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	ebb2 080a 	subs.w	r8, r2, sl
 8002356:	eb63 090b 	sbc.w	r9, r3, fp
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002366:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800236a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800236e:	ebb2 0408 	subs.w	r4, r2, r8
 8002372:	eb63 0509 	sbc.w	r5, r3, r9
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	00eb      	lsls	r3, r5, #3
 8002380:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002384:	00e2      	lsls	r2, r4, #3
 8002386:	4614      	mov	r4, r2
 8002388:	461d      	mov	r5, r3
 800238a:	eb14 030a 	adds.w	r3, r4, sl
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	eb45 030b 	adc.w	r3, r5, fp
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a2:	4629      	mov	r1, r5
 80023a4:	028b      	lsls	r3, r1, #10
 80023a6:	4621      	mov	r1, r4
 80023a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ac:	4621      	mov	r1, r4
 80023ae:	028a      	lsls	r2, r1, #10
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b6:	2200      	movs	r2, #0
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023c0:	f7fd ff22 	bl	8000208 <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4613      	mov	r3, r2
 80023ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	3301      	adds	r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023e6:	e002      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x184>)
 80023ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3740      	adds	r7, #64	@ 0x40
 80023f4:	46bd      	mov	sp, r7
 80023f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	00f42400 	.word	0x00f42400
 8002404:	017d7840 	.word	0x017d7840

08002408 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e025      	b.n	8002468 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7fe ffc5 	bl	80013c0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f000 f86f 	bl	800252c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	6839      	ldr	r1, [r7, #0]
 800245a:	f000 f8c3 	bl	80025e4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002482:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d101      	bne.n	800248e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	e021      	b.n	80024d2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d002      	beq.n	800249a <HAL_SDRAM_SendCommand+0x2a>
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d118      	bne.n	80024cc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f904 	bl	80026b8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d104      	bne.n	80024c2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2205      	movs	r2, #5
 80024bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80024c0:	e006      	b.n	80024d0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80024ca:	e001      	b.n	80024d0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d101      	bne.n	80024f4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
 80024f2:	e016      	b.n	8002522 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10f      	bne.n	8002520 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f8f6 	bl	8002700 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d121      	bne.n	8002582 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <FMC_SDRAM_Init+0xb4>)
 8002544:	4013      	ands	r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	6851      	ldr	r1, [r2, #4]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	6892      	ldr	r2, [r2, #8]
 800254e:	4311      	orrs	r1, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	68d2      	ldr	r2, [r2, #12]
 8002554:	4311      	orrs	r1, r2
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	6912      	ldr	r2, [r2, #16]
 800255a:	4311      	orrs	r1, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	6952      	ldr	r2, [r2, #20]
 8002560:	4311      	orrs	r1, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	6992      	ldr	r2, [r2, #24]
 8002566:	4311      	orrs	r1, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	69d2      	ldr	r2, [r2, #28]
 800256c:	4311      	orrs	r1, r2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	6a12      	ldr	r2, [r2, #32]
 8002572:	4311      	orrs	r1, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002578:	430a      	orrs	r2, r1
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e026      	b.n	80025d0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	69d9      	ldr	r1, [r3, #28]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4319      	orrs	r1, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	430b      	orrs	r3, r1
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <FMC_SDRAM_Init+0xb4>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	6851      	ldr	r1, [r2, #4]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6892      	ldr	r2, [r2, #8]
 80025b0:	4311      	orrs	r1, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	68d2      	ldr	r2, [r2, #12]
 80025b6:	4311      	orrs	r1, r2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	6912      	ldr	r2, [r2, #16]
 80025bc:	4311      	orrs	r1, r2
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	6952      	ldr	r2, [r2, #20]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	6992      	ldr	r2, [r2, #24]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	ffff8000 	.word	0xffff8000

080025e4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d128      	bne.n	8002648 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	3b01      	subs	r3, #1
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4319      	orrs	r1, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	3b01      	subs	r3, #1
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	4319      	orrs	r1, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	3b01      	subs	r3, #1
 800261e:	031b      	lsls	r3, r3, #12
 8002620:	4319      	orrs	r1, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	3b01      	subs	r3, #1
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	4319      	orrs	r1, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	3b01      	subs	r3, #1
 8002632:	051b      	lsls	r3, r3, #20
 8002634:	4319      	orrs	r1, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	3b01      	subs	r3, #1
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	430b      	orrs	r3, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	e02d      	b.n	80026a4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <FMC_SDRAM_Timing_Init+0xd0>)
 800264e:	4013      	ands	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	68d2      	ldr	r2, [r2, #12]
 8002654:	3a01      	subs	r2, #1
 8002656:	0311      	lsls	r1, r2, #12
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	6952      	ldr	r2, [r2, #20]
 800265c:	3a01      	subs	r2, #1
 800265e:	0512      	lsls	r2, r2, #20
 8002660:	430a      	orrs	r2, r1
 8002662:	431a      	orrs	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	1e59      	subs	r1, r3, #1
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	4319      	orrs	r1, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	4319      	orrs	r1, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	3b01      	subs	r3, #1
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	4319      	orrs	r1, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	3b01      	subs	r3, #1
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	430b      	orrs	r3, r1
 800269e:	431a      	orrs	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	ff0f0fff 	.word	0xff0f0fff

080026b8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <FMC_SDRAM_SendCommand+0x44>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	6811      	ldr	r1, [r2, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	6852      	ldr	r2, [r2, #4]
 80026d4:	4311      	orrs	r1, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	3a01      	subs	r2, #1
 80026dc:	0152      	lsls	r2, r2, #5
 80026de:	4311      	orrs	r1, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	68d2      	ldr	r2, [r2, #12]
 80026e4:	0252      	lsls	r2, r2, #9
 80026e6:	430a      	orrs	r2, r1
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	ffc00000 	.word	0xffc00000

08002700 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8002710:	4013      	ands	r3, r2
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	0052      	lsls	r2, r2, #1
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	ffffc001 	.word	0xffffc001

08002730 <memset>:
 8002730:	4402      	add	r2, r0
 8002732:	4603      	mov	r3, r0
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	f803 1b01 	strb.w	r1, [r3], #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <__libc_init_array>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	4d0d      	ldr	r5, [pc, #52]	@ (8002778 <__libc_init_array+0x38>)
 8002744:	4c0d      	ldr	r4, [pc, #52]	@ (800277c <__libc_init_array+0x3c>)
 8002746:	1b64      	subs	r4, r4, r5
 8002748:	10a4      	asrs	r4, r4, #2
 800274a:	2600      	movs	r6, #0
 800274c:	42a6      	cmp	r6, r4
 800274e:	d109      	bne.n	8002764 <__libc_init_array+0x24>
 8002750:	4d0b      	ldr	r5, [pc, #44]	@ (8002780 <__libc_init_array+0x40>)
 8002752:	4c0c      	ldr	r4, [pc, #48]	@ (8002784 <__libc_init_array+0x44>)
 8002754:	f000 f826 	bl	80027a4 <_init>
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	2600      	movs	r6, #0
 800275e:	42a6      	cmp	r6, r4
 8002760:	d105      	bne.n	800276e <__libc_init_array+0x2e>
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	f855 3b04 	ldr.w	r3, [r5], #4
 8002768:	4798      	blx	r3
 800276a:	3601      	adds	r6, #1
 800276c:	e7ee      	b.n	800274c <__libc_init_array+0xc>
 800276e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002772:	4798      	blx	r3
 8002774:	3601      	adds	r6, #1
 8002776:	e7f2      	b.n	800275e <__libc_init_array+0x1e>
 8002778:	080027d4 	.word	0x080027d4
 800277c:	080027d4 	.word	0x080027d4
 8002780:	080027d4 	.word	0x080027d4
 8002784:	080027d8 	.word	0x080027d8

08002788 <memcpy>:
 8002788:	440a      	add	r2, r1
 800278a:	4291      	cmp	r1, r2
 800278c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002790:	d100      	bne.n	8002794 <memcpy+0xc>
 8002792:	4770      	bx	lr
 8002794:	b510      	push	{r4, lr}
 8002796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800279a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800279e:	4291      	cmp	r1, r2
 80027a0:	d1f9      	bne.n	8002796 <memcpy+0xe>
 80027a2:	bd10      	pop	{r4, pc}

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
